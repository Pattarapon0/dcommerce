// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250806170606_IgnoreUserAddressIdField")]
    partial class IgnoreUserAddressIdField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("backend.Data.Cart.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Products table - same as Product.Id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasComment("Quantity of the product in the cart item");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasComment("Concurrency control token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Users table - same as User.Id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_CartItems_ProductId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_CartItems_UserId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("IX_CartItems_UserId_ProductId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("backend.Data.Orders.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("UNIQUE, Format: O-YYYYMMDD-NNN");

                    b.Property<string>("ShippingAddressSnapshot")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("JSON shipping address for the order");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasComment("Total price of all items before tax and shipping");

                    b.Property<decimal>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasComment("Total tax applied to the order");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasComment("Total price of the order including tax and shipping");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId")
                        .HasDatabaseName("IX_Orders_BuyerId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("backend.Data.Orders.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasComment("Total price for this order item (PriceAtOrderTime * Quantity), stored with precision 18,2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PriceAtOrderTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasComment("Price of the product at the time of order, stored with precision 18,2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("URL of the product image in the order item, max length 500 characters");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Name of the product in the order item, max length 200 characters");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasComment("Quantity of the product in the order item, default is 1");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Status of the order item, stored as string");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("IX_OrderItems_OrderId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_OrderItems_ProductId");

                    b.HasIndex("SellerId")
                        .HasDatabaseName("IX_OrderItems_SellerId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("backend.Data.Products.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("THB")
                        .HasComment("Base currency for the product price (ISO 4217 code)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Category of the product, stored as string");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Description of the product, max length 2000 characters");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("JSON array of image URLs for the product");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Indicates whether the product is active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Name of the product, max length 200 characters");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasComment("Price of the product");

                    b.Property<int>("SalesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Number of times the product has been sold");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Stock quantity of the product, must be greater than or equal to 0");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SellerId")
                        .HasDatabaseName("IX_Products_SellerId");

                    b.HasIndex("SellerId", "Name", "Category")
                        .HasDatabaseName("IX_Products_SellerId_Name_Category");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("backend.Data.Sellers.Entities.SellerProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Users table - same as User.Id");

                    b.Property<string>("BusinessDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Optional description of the seller's business");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Name of the seller's business");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SellerProfiles_UserId");

                    b.ToTable("SellerProfiles", (string)null);
                });

            modelBuilder.Entity("backend.Data.User.Entities.OAuthState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeChallenge")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasComment("PKCE code challenge for enhanced security");

                    b.Property<string>("CodeChallengeMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("S256")
                        .HasComment("PKCE code challenge method (S256 recommended)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT")
                        .HasComment("When this OAuth state expires");

                    b.Property<string>("Nonce")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("OpenID Connect nonce for replay protection");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth provider name (e.g., 'google', 'facebook')");

                    b.Property<string>("RedirectUri")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("OAuth redirect URI for this authorization flow");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("CSRF protection state parameter");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_OAuthStates_ExpiresAt");

                    b.HasIndex("Provider")
                        .HasDatabaseName("IX_OAuthStates_Provider");

                    b.HasIndex("State")
                        .IsUnique()
                        .HasDatabaseName("IX_OAuthStates_State");

                    b.HasIndex("UserId");

                    b.ToTable("OAuthStates", (string)null);
                });

            modelBuilder.Entity("backend.Data.User.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsRevoked")
                        .HasFilter("IsRevoked = 0");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "ExpiresAt", "IsRevoked")
                        .HasFilter("IsRevoked = 0");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("backend.Data.User.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AcceptedTerms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether user has accepted terms and conditions");

                    b.Property<DateTime?>("BecameSellerAt")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp when user became a seller - null for buyers");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivationReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Reason for account deactivation - null for active accounts");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("User's primary email address - used for login and communication");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("TEXT")
                        .HasComment("Token for email verification - null when verified");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Count of consecutive failed login attempts");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether user account is active - false for deactivated accounts");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether user's email has been verified");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of last successful login");

                    b.Property<DateTime?>("LastLoginAttempt")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of last login attempt (successful or failed)");

                    b.Property<bool>("NewsletterSubscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether user has opted into newsletter subscription");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasComment("BCrypt hashed password - null for OAuth-only users");

                    b.Property<int?>("PreferredCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("User's preferred currency (enum value)");

                    b.Property<string>("PreferredLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("th")
                        .HasComment("User's preferred language code (ISO 639-1)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("TEXT")
                        .HasComment("Token for password reset - null when not requested");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("TEXT")
                        .HasComment("Expiration time for password reset token");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Buyer")
                        .HasComment("User's role in the system (Buyer, Seller, etc.)");

                    b.Property<DateTime?>("TermsAcceptedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp when terms were accepted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Optional username for social features and public display");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("EmailVerificationToken")
                        .HasDatabaseName("IX_Users_EmailVerificationToken")
                        .HasFilter("[EmailVerificationToken] IS NOT NULL");

                    b.HasIndex("ResetToken")
                        .HasDatabaseName("IX_Users_ResetToken")
                        .HasFilter("[ResetToken] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username")
                        .HasFilter("[Username] IS NOT NULL");

                    b.HasIndex("IsActive", "IsVerified")
                        .HasDatabaseName("IX_Users_Status");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("backend.Data.User.Entities.UserAddress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Users table - same as User.Id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("Primary address line - required for all users");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("Secondary address line - optional");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("City - required for all users");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Thailand")
                        .HasComment("Country - required for all users");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Phone number - optional");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Postal code - required for all users");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("State - required for all users");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserAddresses_UserId");

                    b.ToTable("UserAddresses", (string)null);
                });

            modelBuilder.Entity("backend.Data.User.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoSyncProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2025, 8, 6, 17, 6, 6, 185, DateTimeKind.Utc).AddTicks(8515));

                    b.Property<DateTime?>("LastProfileSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshTokenOAuth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Bearer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastUsedAt")
                        .HasFilter("LastUsedAt IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderKey")
                        .IsUnique();

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("backend.Data.User.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Users table - same as User.Id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Street address - used for shipping and billing");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT")
                        .HasComment("URL to user's profile picture - can be external or internal storage");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT")
                        .HasComment("User's biography or description - used in social features");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("City name - part of complete address");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Country name - used for localization and compliance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasComment("User's date of birth - used for age verification and personalization");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User's first name - collected during registration");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User's last name - collected during registration");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("User's phone number - used for two-factor auth and contact");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Postal/ZIP code - used for shipping calculations");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("TEXT")
                        .HasComment("JSON string containing social media links and handles");

                    b.Property<string>("Timezone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("UTC")
                        .HasComment("User's timezone - used for scheduling and time display");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User's personal or business website URL");

                    b.HasKey("UserId");

                    b.HasIndex("DateOfBirth")
                        .HasDatabaseName("IX_UserProfiles_DateOfBirth")
                        .HasFilter("[DateOfBirth] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_UserProfiles_PhoneNumber")
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("Country", "City")
                        .HasDatabaseName("IX_UserProfiles_Location")
                        .HasFilter("[Country] IS NOT NULL AND [City] IS NOT NULL");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_UserProfiles_FullName")
                        .HasFilter("[FirstName] IS NOT NULL AND [LastName] IS NOT NULL");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("backend.Data.Cart.Entities.CartItem", b =>
                {
                    b.HasOne("backend.Data.Products.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_CartItems");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.Orders.Entities.Order", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Orders");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("backend.Data.Orders.Entities.OrderItem", b =>
                {
                    b.HasOne("backend.Data.Orders.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Data.Products.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("backend.Data.Products.Entities.Product", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Products");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("backend.Data.Sellers.Entities.SellerProfile", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithOne("SellerProfile")
                        .HasForeignKey("backend.Data.Sellers.Entities.SellerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_SellerProfiles");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.User.Entities.OAuthState", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.User.Entities.RefreshToken", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_RefreshTokens");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.User.Entities.UserAddress", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("backend.Data.User.Entities.UserAddress", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserAddresses_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.User.Entities.UserLogin", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserLogins");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.User.Entities.UserProfile", b =>
                {
                    b.HasOne("backend.Data.User.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("backend.Data.User.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserProfiles_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Data.Orders.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("backend.Data.Products.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("backend.Data.User.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CartItems");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Profile");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SellerProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
