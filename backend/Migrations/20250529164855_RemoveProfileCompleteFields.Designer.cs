// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data.User;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250529164855_RemoveProfileCompleteFields")]
    partial class RemoveProfileCompleteFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("server.Data.User.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsRevoked")
                        .HasFilter("IsRevoked = 0");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "ExpiresAt", "IsRevoked")
                        .HasFilter("IsRevoked = 0");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("server.Data.User.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AcceptedTerms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether user has accepted terms and conditions");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeactivationReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Reason for account deactivation - null for active accounts");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("User's primary email address - used for login and communication");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("TEXT")
                        .HasComment("Token for email verification - null when verified");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasComment("Count of consecutive failed login attempts");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasComment("Whether user account is active - false for deactivated accounts");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether user's email has been verified");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of last successful login");

                    b.Property<DateTime?>("LastLoginAttempt")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of last login attempt (successful or failed)");

                    b.Property<bool>("NewsletterSubscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasComment("Whether user has opted into newsletter subscription");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasComment("BCrypt hashed password - null for OAuth-only users");

                    b.Property<string>("PreferredCurrency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("USD")
                        .HasComment("User's preferred currency code (ISO 4217)");

                    b.Property<string>("PreferredLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("en")
                        .HasComment("User's preferred language code (ISO 639-1)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("TEXT")
                        .HasComment("Token for password reset - null when not requested");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("TEXT")
                        .HasComment("Expiration time for password reset token");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("User")
                        .HasComment("User's role in the system (User, Admin, etc.)");

                    b.Property<DateTime?>("TermsAcceptedAt")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp when terms were accepted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Optional username for social features and public display");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("EmailVerificationToken")
                        .HasDatabaseName("IX_Users_EmailVerificationToken")
                        .HasFilter("[EmailVerificationToken] IS NOT NULL");

                    b.HasIndex("ResetToken")
                        .HasDatabaseName("IX_Users_ResetToken")
                        .HasFilter("[ResetToken] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username")
                        .HasFilter("[Username] IS NOT NULL");

                    b.HasIndex("IsActive", "IsVerified")
                        .HasDatabaseName("IX_Users_Status");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("server.Data.User.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoSyncProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2025, 5, 29, 16, 48, 54, 871, DateTimeKind.Utc).AddTicks(2612));

                    b.Property<DateTime?>("LastProfileSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshTokenOAuth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Bearer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastUsedAt")
                        .HasFilter("LastUsedAt IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "ProviderKey")
                        .IsUnique();

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("server.Data.User.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasComment("Foreign key to Users table - same as User.Id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Street address - used for shipping and billing");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT")
                        .HasComment("URL to user's profile picture - can be external or internal storage");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT")
                        .HasComment("User's biography or description - used in social features");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("City name - part of complete address");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Country name - used for localization and compliance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasComment("User's date of birth - used for age verification and personalization");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User's first name - collected during registration");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User's last name - collected during registration");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("User's phone number - used for two-factor auth and contact");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Postal/ZIP code - used for shipping calculations");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("TEXT")
                        .HasComment("JSON string containing social media links and handles");

                    b.Property<string>("Timezone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("UTC")
                        .HasComment("User's timezone - used for scheduling and time display");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("User's personal or business website URL");

                    b.HasKey("UserId");

                    b.HasIndex("DateOfBirth")
                        .HasDatabaseName("IX_UserProfiles_DateOfBirth")
                        .HasFilter("[DateOfBirth] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_UserProfiles_PhoneNumber")
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("Country", "City")
                        .HasDatabaseName("IX_UserProfiles_Location")
                        .HasFilter("[Country] IS NOT NULL AND [City] IS NOT NULL");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_UserProfiles_FullName")
                        .HasFilter("[FirstName] IS NOT NULL AND [LastName] IS NOT NULL");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("server.Data.User.Entities.RefreshToken", b =>
                {
                    b.HasOne("server.Data.User.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_RefreshTokens");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Data.User.Entities.UserLogin", b =>
                {
                    b.HasOne("server.Data.User.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserLogins");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Data.User.Entities.UserProfile", b =>
                {
                    b.HasOne("server.Data.User.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("server.Data.User.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserProfiles_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Data.User.Entities.User", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("Profile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
