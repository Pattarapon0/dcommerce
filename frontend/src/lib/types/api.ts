/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                    "text/json": components["schemas"]["RegisterRequest"];
                    "application/*+json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceSuccess`1"];
                        "application/json": components["schemas"]["ServiceSuccess`1"];
                        "text/json": components["schemas"]["ServiceSuccess`1"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["VerifyEmailRequest"];
                    "text/json": components["schemas"]["VerifyEmailRequest"];
                    "application/*+json": components["schemas"]["VerifyEmailRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceSuccess`1"];
                        "application/json": components["schemas"]["ServiceSuccess`1"];
                        "text/json": components["schemas"]["ServiceSuccess`1"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                    "text/json": components["schemas"]["LoginRequest"];
                    "application/*+json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceSuccess`1"];
                        "application/json": components["schemas"]["ServiceSuccess`1"];
                        "text/json": components["schemas"]["ServiceSuccess`1"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceError"];
                        "application/json": components["schemas"]["ServiceError"];
                        "text/json": components["schemas"]["ServiceError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AddToCartRequest"];
                    "text/json": components["schemas"]["AddToCartRequest"];
                    "application/*+json": components["schemas"]["AddToCartRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/items/{cartItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cartItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cartItemId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateCartItemRequest"];
                    "text/json": components["schemas"]["UpdateCartItemRequest"];
                    "application/*+json": components["schemas"]["UpdateCartItemRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cartItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cart/checkout-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    Status?: components["schemas"]["OrderItemStatus"];
                    FromDate?: string;
                    ToDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateOrderRequest"];
                    "text/json": components["schemas"]["CreateOrderRequest"];
                    "application/*+json": components["schemas"]["CreateOrderRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/from-cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    OrderNumber: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{orderId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CancelOrderRequest"];
                    "text/json": components["schemas"]["CancelOrderRequest"];
                    "application/*+json": components["schemas"]["CancelOrderRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{orderId}/can-cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{orderId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/items/{orderItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/items/{orderItemId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderItemId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateOrderStatusRequest"];
                    "text/json": components["schemas"]["UpdateOrderStatusRequest"];
                    "application/*+json": components["schemas"]["UpdateOrderStatusRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/items/{orderItemId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderItemId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CancelOrderRequest"];
                    "text/json": components["schemas"]["CancelOrderRequest"];
                    "application/*+json": components["schemas"]["CancelOrderRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    Category?: components["schemas"]["ProductCategory"];
                    MinPrice?: number;
                    MaxPrice?: number;
                    SearchTerm?: string;
                    SortBy?: string;
                    Ascending?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateProductRequest"];
                    "text/json": components["schemas"]["CreateProductRequest"];
                    "application/*+json": components["schemas"]["CreateProductRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProductRequest"];
                    "text/json": components["schemas"]["UpdateProductRequest"];
                    "application/*+json": components["schemas"]["UpdateProductRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    Term: string;
                    Limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/featured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}/related": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/seller/{sellerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sellerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/my-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Category?: components["schemas"]["ProductCategory"];
                    MinPrice?: number;
                    MaxPrice?: number;
                    SearchTerm?: string;
                    SortBy?: string;
                    Ascending?: boolean;
                    Page?: number;
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/my-products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}/stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateStockRequest"];
                    "text/json": components["schemas"]["UpdateStockRequest"];
                    "application/*+json": components["schemas"]["UpdateStockRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}/stock/atomic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateStockRequest"];
                    "text/json": components["schemas"]["UpdateStockRequest"];
                    "application/*+json": components["schemas"]["UpdateStockRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/stock/bulk-restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BulkRestoreStockRequest"];
                    "text/json": components["schemas"]["BulkRestoreStockRequest"];
                    "application/*+json": components["schemas"]["BulkRestoreStockRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query: {
                    fileName: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": string[];
                    "text/json": string[];
                    "application/*+json": string[];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete: {
            parameters: {
                query: {
                    imageUrl: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/confirm-upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ConfirmUploadRequest"];
                    "text/json": components["schemas"]["ConfirmUploadRequest"];
                    "application/*+json": components["schemas"]["ConfirmUploadRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}/stock-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    quantity?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/top-selling": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sellers/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateSellerProfileRequest"];
                    "text/json": components["schemas"]["UpdateSellerProfileRequest"];
                    "application/*+json": components["schemas"]["UpdateSellerProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSellerProfileRequest"];
                    "text/json": components["schemas"]["CreateSellerProfileRequest"];
                    "application/*+json": components["schemas"]["CreateSellerProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sellers/profile/exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sellers/{sellerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sellerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sellers/business-name-available/{businessName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    businessName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/User/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateUserProfileRequest"];
                    "text/json": components["schemas"]["UpdateUserProfileRequest"];
                    "application/*+json": components["schemas"]["UpdateUserProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/User/profile/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CompleteProfileRequest"];
                    "text/json": components["schemas"]["CompleteProfileRequest"];
                    "application/*+json": components["schemas"]["CompleteProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/User/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateUserAddressRequest"];
                    "text/json": components["schemas"]["UpdateUserAddressRequest"];
                    "application/*+json": components["schemas"]["UpdateUserAddressRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateUserAddressRequest"];
                    "text/json": components["schemas"]["CreateUserAddressRequest"];
                    "application/*+json": components["schemas"]["CreateUserAddressRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/User/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/User/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateUserPreferencesRequest"];
                    "text/json": components["schemas"]["UpdateUserPreferencesRequest"];
                    "application/*+json": components["schemas"]["UpdateUserPreferencesRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/User/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddToCartRequest: {
            /** Format: uuid */
            ProductId?: string;
            /** Format: int32 */
            Quantity?: number;
        };
        Assembly: {
            readonly DefinedTypes?: components["schemas"]["TypeInfo"][] | null;
            readonly ExportedTypes?: components["schemas"]["Type"][] | null;
            /** @deprecated */
            readonly CodeBase?: string | null;
            EntryPoint?: components["schemas"]["MethodInfo"];
            readonly FullName?: string | null;
            readonly ImageRuntimeVersion?: string | null;
            readonly IsDynamic?: boolean;
            readonly Location?: string | null;
            readonly ReflectionOnly?: boolean;
            readonly IsCollectible?: boolean;
            readonly IsFullyTrusted?: boolean;
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            /** @deprecated */
            readonly EscapedCodeBase?: string | null;
            ManifestModule?: components["schemas"]["Module"];
            readonly Modules?: components["schemas"]["Module"][] | null;
            /** @deprecated */
            readonly GlobalAssemblyCache?: boolean;
            /** Format: int64 */
            readonly HostContext?: number;
            SecurityRuleSet?: components["schemas"]["SecurityRuleSet"];
        };
        BulkRestoreStockItem: {
            /** Format: uuid */
            ProductId?: string;
            /** Format: int32 */
            Quantity?: number;
        };
        BulkRestoreStockRequest: {
            Items?: components["schemas"]["BulkRestoreStockItem"][] | null;
        };
        /** @enum {string} */
        CallingConventions: "Standard" | "VarArgs" | "Any" | "HasThis" | "ExplicitThis";
        CancelOrderRequest: {
            Reason?: string | null;
        };
        CompleteProfileRequest: {
            Country?: string | null;
            PhoneNumber?: string | null;
            /** Format: date-time */
            DateOfBirth?: string | null;
            PreferredLanguage?: string | null;
            PreferredCurrency?: string | null;
        };
        ConfirmUploadRequest: {
            R2Url?: string | null;
        };
        ConstructorInfo: {
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            Attributes?: components["schemas"]["MethodAttributes"];
            MethodImplementationFlags?: components["schemas"]["MethodImplAttributes"];
            CallingConvention?: components["schemas"]["CallingConventions"];
            readonly IsAbstract?: boolean;
            readonly IsConstructor?: boolean;
            readonly IsFinal?: boolean;
            readonly IsHideBySig?: boolean;
            readonly IsSpecialName?: boolean;
            readonly IsStatic?: boolean;
            readonly IsVirtual?: boolean;
            readonly IsAssembly?: boolean;
            readonly IsFamily?: boolean;
            readonly IsFamilyAndAssembly?: boolean;
            readonly IsFamilyOrAssembly?: boolean;
            readonly IsPrivate?: boolean;
            readonly IsPublic?: boolean;
            readonly IsConstructedGenericMethod?: boolean;
            readonly IsGenericMethod?: boolean;
            readonly IsGenericMethodDefinition?: boolean;
            readonly ContainsGenericParameters?: boolean;
            MethodHandle?: components["schemas"]["RuntimeMethodHandle"];
            readonly IsSecurityCritical?: boolean;
            readonly IsSecuritySafeCritical?: boolean;
            readonly IsSecurityTransparent?: boolean;
            MemberType?: components["schemas"]["MemberTypes"];
        };
        CreateOrderRequest: {
            Items?: components["schemas"]["OrderItemRequest"][] | null;
            ShippingAddress?: string | null;
            Notes?: string | null;
        };
        CreateProductRequest: {
            Name?: string | null;
            Description?: string | null;
            /** Format: double */
            Price?: number;
            Currency?: string | null;
            Category?: components["schemas"]["ProductCategory"];
            /** Format: int32 */
            Stock?: number;
            Images?: string[] | null;
        };
        CreateSellerProfileRequest: {
            BusinessName?: string | null;
            BusinessDescription?: string | null;
        };
        CreateUserAddressRequest: {
            Address: string;
            City: string;
            Country: string;
            PostalCode: string;
        };
        CustomAttributeData: {
            AttributeType?: components["schemas"]["Type"];
            Constructor?: components["schemas"]["ConstructorInfo"];
            readonly ConstructorArguments?: components["schemas"]["CustomAttributeTypedArgument"][] | null;
            readonly NamedArguments?: components["schemas"]["CustomAttributeNamedArgument"][] | null;
        };
        CustomAttributeNamedArgument: {
            MemberInfo?: components["schemas"]["MemberInfo"];
            TypedValue?: components["schemas"]["CustomAttributeTypedArgument"];
            readonly MemberName?: string | null;
            readonly IsField?: boolean;
        };
        CustomAttributeTypedArgument: {
            ArgumentType?: components["schemas"]["Type"];
            Value?: unknown;
        };
        Error: {
            /** Format: int32 */
            readonly Code?: number;
            readonly Message?: string | null;
            readonly Inner?: components["schemas"]["Error"][];
            readonly IsExceptional?: boolean;
            readonly IsExpected?: boolean;
            Head?: components["schemas"]["Error"];
            Tail?: components["schemas"]["Error"];
            readonly IsEmpty?: boolean;
            /** Format: int32 */
            readonly Count?: number;
            readonly Exception?: components["schemas"]["Exception"][];
        };
        /** @enum {string} */
        EventAttributes: "None" | "SpecialName" | "RTSpecialName";
        EventInfo: {
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            MemberType?: components["schemas"]["MemberTypes"];
            Attributes?: components["schemas"]["EventAttributes"];
            readonly IsSpecialName?: boolean;
            AddMethod?: components["schemas"]["MethodInfo"];
            RemoveMethod?: components["schemas"]["MethodInfo"];
            RaiseMethod?: components["schemas"]["MethodInfo"];
            readonly IsMulticast?: boolean;
            EventHandlerType?: components["schemas"]["Type"];
        };
        Exception: {
            TargetSite?: components["schemas"]["MethodBase"];
            readonly Message?: string | null;
            readonly Data?: {
                [key: string]: unknown;
            } | null;
            InnerException?: components["schemas"]["Exception"];
            HelpLink?: string | null;
            Source?: string | null;
            /** Format: int32 */
            HResult?: number;
            readonly StackTrace?: string | null;
        };
        /** @enum {string} */
        FieldAttributes: "PrivateScope" | "Private" | "FamANDAssem" | "Assembly" | "Family" | "FamORAssem" | "Public" | "FieldAccessMask" | "Static" | "InitOnly" | "Literal" | "NotSerialized" | "HasFieldRVA" | "SpecialName" | "RTSpecialName" | "HasFieldMarshal" | "PinvokeImpl" | "HasDefault" | "ReservedMask";
        FieldInfo: {
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            MemberType?: components["schemas"]["MemberTypes"];
            Attributes?: components["schemas"]["FieldAttributes"];
            FieldType?: components["schemas"]["Type"];
            readonly IsInitOnly?: boolean;
            readonly IsLiteral?: boolean;
            /** @deprecated */
            readonly IsNotSerialized?: boolean;
            readonly IsPinvokeImpl?: boolean;
            readonly IsSpecialName?: boolean;
            readonly IsStatic?: boolean;
            readonly IsAssembly?: boolean;
            readonly IsFamily?: boolean;
            readonly IsFamilyAndAssembly?: boolean;
            readonly IsFamilyOrAssembly?: boolean;
            readonly IsPrivate?: boolean;
            readonly IsPublic?: boolean;
            readonly IsSecurityCritical?: boolean;
            readonly IsSecuritySafeCritical?: boolean;
            readonly IsSecurityTransparent?: boolean;
            FieldHandle?: components["schemas"]["RuntimeFieldHandle"];
        };
        /** @enum {string} */
        GenericParameterAttributes: "None" | "Covariant" | "Contravariant" | "VarianceMask" | "ReferenceTypeConstraint" | "NotNullableValueTypeConstraint" | "DefaultConstructorConstraint" | "SpecialConstraintMask" | "AllowByRefLike";
        ICustomAttributeProvider: Record<string, never>;
        IntPtr: Record<string, never>;
        /** @enum {string} */
        LayoutKind: "Sequential" | "Explicit" | "Auto";
        LoginRequest: {
            Email?: string | null;
            Password?: string | null;
        };
        MemberInfo: {
            MemberType?: components["schemas"]["MemberTypes"];
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
        };
        /** @enum {string} */
        MemberTypes: "Constructor" | "Event" | "Field" | "Method" | "Property" | "TypeInfo" | "Custom" | "NestedType" | "All";
        /** @enum {string} */
        MethodAttributes: "PrivateScope" | "Private" | "FamANDAssem" | "Assembly" | "Family" | "FamORAssem" | "Public" | "MemberAccessMask" | "UnmanagedExport" | "Static" | "Final" | "Virtual" | "HideBySig" | "NewSlot" | "CheckAccessOnOverride" | "Abstract" | "SpecialName" | "RTSpecialName" | "PinvokeImpl" | "HasSecurity" | "RequireSecObject" | "ReservedMask";
        MethodBase: {
            MemberType?: components["schemas"]["MemberTypes"];
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            Attributes?: components["schemas"]["MethodAttributes"];
            MethodImplementationFlags?: components["schemas"]["MethodImplAttributes"];
            CallingConvention?: components["schemas"]["CallingConventions"];
            readonly IsAbstract?: boolean;
            readonly IsConstructor?: boolean;
            readonly IsFinal?: boolean;
            readonly IsHideBySig?: boolean;
            readonly IsSpecialName?: boolean;
            readonly IsStatic?: boolean;
            readonly IsVirtual?: boolean;
            readonly IsAssembly?: boolean;
            readonly IsFamily?: boolean;
            readonly IsFamilyAndAssembly?: boolean;
            readonly IsFamilyOrAssembly?: boolean;
            readonly IsPrivate?: boolean;
            readonly IsPublic?: boolean;
            readonly IsConstructedGenericMethod?: boolean;
            readonly IsGenericMethod?: boolean;
            readonly IsGenericMethodDefinition?: boolean;
            readonly ContainsGenericParameters?: boolean;
            MethodHandle?: components["schemas"]["RuntimeMethodHandle"];
            readonly IsSecurityCritical?: boolean;
            readonly IsSecuritySafeCritical?: boolean;
            readonly IsSecurityTransparent?: boolean;
        };
        /** @enum {string} */
        MethodImplAttributes: "IL" | "Native" | "OPTIL" | "CodeTypeMask" | "ManagedMask" | "NoInlining" | "ForwardRef" | "Synchronized" | "NoOptimization" | "PreserveSig" | "AggressiveInlining" | "AggressiveOptimization" | "InternalCall" | "MaxMethodImplVal";
        MethodInfo: {
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            Attributes?: components["schemas"]["MethodAttributes"];
            MethodImplementationFlags?: components["schemas"]["MethodImplAttributes"];
            CallingConvention?: components["schemas"]["CallingConventions"];
            readonly IsAbstract?: boolean;
            readonly IsConstructor?: boolean;
            readonly IsFinal?: boolean;
            readonly IsHideBySig?: boolean;
            readonly IsSpecialName?: boolean;
            readonly IsStatic?: boolean;
            readonly IsVirtual?: boolean;
            readonly IsAssembly?: boolean;
            readonly IsFamily?: boolean;
            readonly IsFamilyAndAssembly?: boolean;
            readonly IsFamilyOrAssembly?: boolean;
            readonly IsPrivate?: boolean;
            readonly IsPublic?: boolean;
            readonly IsConstructedGenericMethod?: boolean;
            readonly IsGenericMethod?: boolean;
            readonly IsGenericMethodDefinition?: boolean;
            readonly ContainsGenericParameters?: boolean;
            MethodHandle?: components["schemas"]["RuntimeMethodHandle"];
            readonly IsSecurityCritical?: boolean;
            readonly IsSecuritySafeCritical?: boolean;
            readonly IsSecurityTransparent?: boolean;
            MemberType?: components["schemas"]["MemberTypes"];
            ReturnParameter?: components["schemas"]["ParameterInfo"];
            ReturnType?: components["schemas"]["Type"];
            ReturnTypeCustomAttributes?: components["schemas"]["ICustomAttributeProvider"];
        };
        Module: {
            Assembly?: components["schemas"]["Assembly"];
            readonly FullyQualifiedName?: string | null;
            readonly Name?: string | null;
            /** Format: int32 */
            readonly MDStreamVersion?: number;
            /** Format: uuid */
            readonly ModuleVersionId?: string;
            readonly ScopeName?: string | null;
            ModuleHandle?: components["schemas"]["ModuleHandle"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            /** Format: int32 */
            readonly MetadataToken?: number;
        };
        ModuleHandle: {
            /** Format: int32 */
            readonly MDStreamVersion?: number;
        };
        OrderItemRequest: {
            /** Format: uuid */
            ProductId?: string;
            /** Format: int32 */
            Quantity?: number;
        };
        /** @enum {string} */
        OrderItemStatus: "Pending" | "Processing" | "Shipped" | "Delivered" | "Cancelled";
        /** @enum {string} */
        ParameterAttributes: "None" | "In" | "Out" | "Lcid" | "Retval" | "Optional" | "HasDefault" | "HasFieldMarshal" | "Reserved3" | "Reserved4" | "ReservedMask";
        ParameterInfo: {
            Attributes?: components["schemas"]["ParameterAttributes"];
            Member?: components["schemas"]["MemberInfo"];
            readonly Name?: string | null;
            ParameterType?: components["schemas"]["Type"];
            /** Format: int32 */
            readonly Position?: number;
            readonly IsIn?: boolean;
            readonly IsLcid?: boolean;
            readonly IsOptional?: boolean;
            readonly IsOut?: boolean;
            readonly IsRetval?: boolean;
            readonly DefaultValue?: unknown;
            readonly RawDefaultValue?: unknown;
            readonly HasDefaultValue?: boolean;
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            /** Format: int32 */
            readonly MetadataToken?: number;
        };
        /** @enum {string} */
        ProductCategory: "Electronics" | "Clothing" | "Books" | "Home" | "Sports" | "Other";
        /** @enum {string} */
        PropertyAttributes: "None" | "SpecialName" | "RTSpecialName" | "HasDefault" | "Reserved2" | "Reserved3" | "Reserved4" | "ReservedMask";
        PropertyInfo: {
            readonly Name?: string | null;
            DeclaringType?: components["schemas"]["Type"];
            ReflectedType?: components["schemas"]["Type"];
            Module?: components["schemas"]["Module"];
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            MemberType?: components["schemas"]["MemberTypes"];
            PropertyType?: components["schemas"]["Type"];
            Attributes?: components["schemas"]["PropertyAttributes"];
            readonly IsSpecialName?: boolean;
            readonly CanRead?: boolean;
            readonly CanWrite?: boolean;
            GetMethod?: components["schemas"]["MethodInfo"];
            SetMethod?: components["schemas"]["MethodInfo"];
        };
        RegisterRequest: {
            Email?: string | null;
            Password?: string | null;
            FirstName?: string | null;
            LastName?: string | null;
            Country?: string | null;
            PhoneNumber?: string | null;
            /** Format: date-time */
            DateOfBirth?: string | null;
            AcceptedTerms?: boolean;
            NewsletterSubscription?: boolean;
            Username?: string | null;
            PreferredLanguage?: string | null;
            PreferredCurrency?: string | null;
        };
        RuntimeFieldHandle: {
            Value?: components["schemas"]["IntPtr"];
        };
        RuntimeMethodHandle: {
            Value?: components["schemas"]["IntPtr"];
        };
        RuntimeTypeHandle: {
            Value?: components["schemas"]["IntPtr"];
        };
        /** @enum {string} */
        SecurityRuleSet: "None" | "Level1" | "Level2";
        /** @enum {string} */
        ServiceCategory: "General" | "Authentication" | "Token" | "Password" | "Database" | "Validation" | "Product" | "Image";
        ServiceError: {
            readonly Inner?: components["schemas"]["Error"][];
            Head?: components["schemas"]["Error"];
            Tail?: components["schemas"]["Error"];
            readonly IsEmpty?: boolean;
            /** Format: int32 */
            readonly Count?: number;
            readonly Exception?: components["schemas"]["Exception"][];
            readonly ErrorCode?: string | null;
            readonly Message?: string | null;
            /** Format: int32 */
            readonly StatusCode?: number;
            Category?: components["schemas"]["ServiceCategory"];
            Errors?: {
                [key: string]: string[];
            } | null;
            /** Format: int32 */
            readonly Code?: number;
            readonly IsExpected?: boolean;
            readonly IsExceptional?: boolean;
            readonly IsClientError?: boolean;
            readonly IsbackendError?: boolean;
            readonly IsAuthenticationError?: boolean;
            readonly HasFieldErrors?: boolean;
        };
        "ServiceSuccess`1": {
            Data?: components["schemas"]["T"];
            readonly Message?: string | null;
            /** Format: int32 */
            readonly StatusCode?: number;
        };
        StructLayoutAttribute: {
            readonly TypeId?: unknown;
            Value?: components["schemas"]["LayoutKind"];
        };
        T: Record<string, never>;
        Type: {
            readonly Name?: string | null;
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            MemberType?: components["schemas"]["MemberTypes"];
            readonly Namespace?: string | null;
            readonly AssemblyQualifiedName?: string | null;
            readonly FullName?: string | null;
            Assembly?: components["schemas"]["Assembly"];
            Module?: components["schemas"]["Module"];
            readonly IsInterface?: boolean;
            readonly IsNested?: boolean;
            DeclaringType?: components["schemas"]["Type"];
            DeclaringMethod?: components["schemas"]["MethodBase"];
            ReflectedType?: components["schemas"]["Type"];
            UnderlyingSystemType?: components["schemas"]["Type"];
            readonly IsTypeDefinition?: boolean;
            readonly IsArray?: boolean;
            readonly IsByRef?: boolean;
            readonly IsPointer?: boolean;
            readonly IsConstructedGenericType?: boolean;
            readonly IsGenericParameter?: boolean;
            readonly IsGenericTypeParameter?: boolean;
            readonly IsGenericMethodParameter?: boolean;
            readonly IsGenericType?: boolean;
            readonly IsGenericTypeDefinition?: boolean;
            readonly IsSZArray?: boolean;
            readonly IsVariableBoundArray?: boolean;
            readonly IsByRefLike?: boolean;
            readonly IsFunctionPointer?: boolean;
            readonly IsUnmanagedFunctionPointer?: boolean;
            readonly HasElementType?: boolean;
            readonly GenericTypeArguments?: components["schemas"]["Type"][] | null;
            /** Format: int32 */
            readonly GenericParameterPosition?: number;
            GenericParameterAttributes?: components["schemas"]["GenericParameterAttributes"];
            Attributes?: components["schemas"]["TypeAttributes"];
            readonly IsAbstract?: boolean;
            readonly IsImport?: boolean;
            readonly IsSealed?: boolean;
            readonly IsSpecialName?: boolean;
            readonly IsClass?: boolean;
            readonly IsNestedAssembly?: boolean;
            readonly IsNestedFamANDAssem?: boolean;
            readonly IsNestedFamily?: boolean;
            readonly IsNestedFamORAssem?: boolean;
            readonly IsNestedPrivate?: boolean;
            readonly IsNestedPublic?: boolean;
            readonly IsNotPublic?: boolean;
            readonly IsPublic?: boolean;
            readonly IsAutoLayout?: boolean;
            readonly IsExplicitLayout?: boolean;
            readonly IsLayoutSequential?: boolean;
            readonly IsAnsiClass?: boolean;
            readonly IsAutoClass?: boolean;
            readonly IsUnicodeClass?: boolean;
            readonly IsCOMObject?: boolean;
            readonly IsContextful?: boolean;
            readonly IsEnum?: boolean;
            readonly IsMarshalByRef?: boolean;
            readonly IsPrimitive?: boolean;
            readonly IsValueType?: boolean;
            readonly IsSignatureType?: boolean;
            readonly IsSecurityCritical?: boolean;
            readonly IsSecuritySafeCritical?: boolean;
            readonly IsSecurityTransparent?: boolean;
            StructLayoutAttribute?: components["schemas"]["StructLayoutAttribute"];
            TypeInitializer?: components["schemas"]["ConstructorInfo"];
            TypeHandle?: components["schemas"]["RuntimeTypeHandle"];
            /** Format: uuid */
            readonly GUID?: string;
            BaseType?: components["schemas"]["Type"];
            /** @deprecated */
            readonly IsSerializable?: boolean;
            readonly ContainsGenericParameters?: boolean;
            readonly IsVisible?: boolean;
        };
        /** @enum {string} */
        TypeAttributes: "NotPublic" | "Public" | "NestedPublic" | "NestedPrivate" | "NestedFamily" | "NestedAssembly" | "NestedFamANDAssem" | "VisibilityMask" | "SequentialLayout" | "ExplicitLayout" | "LayoutMask" | "Interface" | "Abstract" | "Sealed" | "SpecialName" | "RTSpecialName" | "Import" | "Serializable" | "WindowsRuntime" | "UnicodeClass" | "AutoClass" | "StringFormatMask" | "HasSecurity" | "ReservedMask" | "BeforeFieldInit" | "CustomFormatMask";
        TypeInfo: {
            readonly Name?: string | null;
            readonly CustomAttributes?: components["schemas"]["CustomAttributeData"][] | null;
            readonly IsCollectible?: boolean;
            /** Format: int32 */
            readonly MetadataToken?: number;
            MemberType?: components["schemas"]["MemberTypes"];
            readonly Namespace?: string | null;
            readonly AssemblyQualifiedName?: string | null;
            readonly FullName?: string | null;
            Assembly?: components["schemas"]["Assembly"];
            Module?: components["schemas"]["Module"];
            readonly IsInterface?: boolean;
            readonly IsNested?: boolean;
            DeclaringType?: components["schemas"]["Type"];
            DeclaringMethod?: components["schemas"]["MethodBase"];
            ReflectedType?: components["schemas"]["Type"];
            UnderlyingSystemType?: components["schemas"]["Type"];
            readonly IsTypeDefinition?: boolean;
            readonly IsArray?: boolean;
            readonly IsByRef?: boolean;
            readonly IsPointer?: boolean;
            readonly IsConstructedGenericType?: boolean;
            readonly IsGenericParameter?: boolean;
            readonly IsGenericTypeParameter?: boolean;
            readonly IsGenericMethodParameter?: boolean;
            readonly IsGenericType?: boolean;
            readonly IsGenericTypeDefinition?: boolean;
            readonly IsSZArray?: boolean;
            readonly IsVariableBoundArray?: boolean;
            readonly IsByRefLike?: boolean;
            readonly IsFunctionPointer?: boolean;
            readonly IsUnmanagedFunctionPointer?: boolean;
            readonly HasElementType?: boolean;
            readonly GenericTypeArguments?: components["schemas"]["Type"][] | null;
            /** Format: int32 */
            readonly GenericParameterPosition?: number;
            GenericParameterAttributes?: components["schemas"]["GenericParameterAttributes"];
            Attributes?: components["schemas"]["TypeAttributes"];
            readonly IsAbstract?: boolean;
            readonly IsImport?: boolean;
            readonly IsSealed?: boolean;
            readonly IsSpecialName?: boolean;
            readonly IsClass?: boolean;
            readonly IsNestedAssembly?: boolean;
            readonly IsNestedFamANDAssem?: boolean;
            readonly IsNestedFamily?: boolean;
            readonly IsNestedFamORAssem?: boolean;
            readonly IsNestedPrivate?: boolean;
            readonly IsNestedPublic?: boolean;
            readonly IsNotPublic?: boolean;
            readonly IsPublic?: boolean;
            readonly IsAutoLayout?: boolean;
            readonly IsExplicitLayout?: boolean;
            readonly IsLayoutSequential?: boolean;
            readonly IsAnsiClass?: boolean;
            readonly IsAutoClass?: boolean;
            readonly IsUnicodeClass?: boolean;
            readonly IsCOMObject?: boolean;
            readonly IsContextful?: boolean;
            readonly IsEnum?: boolean;
            readonly IsMarshalByRef?: boolean;
            readonly IsPrimitive?: boolean;
            readonly IsValueType?: boolean;
            readonly IsSignatureType?: boolean;
            readonly IsSecurityCritical?: boolean;
            readonly IsSecuritySafeCritical?: boolean;
            readonly IsSecurityTransparent?: boolean;
            StructLayoutAttribute?: components["schemas"]["StructLayoutAttribute"];
            TypeInitializer?: components["schemas"]["ConstructorInfo"];
            TypeHandle?: components["schemas"]["RuntimeTypeHandle"];
            /** Format: uuid */
            readonly GUID?: string;
            BaseType?: components["schemas"]["Type"];
            /** @deprecated */
            readonly IsSerializable?: boolean;
            readonly ContainsGenericParameters?: boolean;
            readonly IsVisible?: boolean;
            readonly GenericTypeParameters?: components["schemas"]["Type"][] | null;
            readonly DeclaredConstructors?: components["schemas"]["ConstructorInfo"][] | null;
            readonly DeclaredEvents?: components["schemas"]["EventInfo"][] | null;
            readonly DeclaredFields?: components["schemas"]["FieldInfo"][] | null;
            readonly DeclaredMembers?: components["schemas"]["MemberInfo"][] | null;
            readonly DeclaredMethods?: components["schemas"]["MethodInfo"][] | null;
            readonly DeclaredNestedTypes?: components["schemas"]["TypeInfo"][] | null;
            readonly DeclaredProperties?: components["schemas"]["PropertyInfo"][] | null;
            readonly ImplementedInterfaces?: components["schemas"]["Type"][] | null;
        };
        UpdateCartItemRequest: {
            /** Format: int32 */
            Quantity?: number;
        };
        UpdateOrderStatusRequest: {
            Status?: components["schemas"]["OrderItemStatus"];
            Notes?: string | null;
        };
        UpdateProductRequest: {
            Name?: string | null;
            Description?: string | null;
            /** Format: double */
            Price?: number | null;
            Category?: components["schemas"]["ProductCategory"];
            /** Format: int32 */
            Stock?: number | null;
            Images?: string[] | null;
        };
        UpdateSellerProfileRequest: {
            BusinessName?: string | null;
            BusinessDescription?: string | null;
        };
        UpdateStockRequest: {
            /** Format: int32 */
            Stock?: number;
        };
        UpdateUserAddressRequest: {
            Address?: string | null;
            City?: string | null;
            Country?: string | null;
            PostalCode?: string | null;
        };
        UpdateUserPreferencesRequest: {
            Timezone?: string | null;
            Language?: string | null;
        };
        UpdateUserProfileRequest: {
            FirstName?: string | null;
            LastName?: string | null;
            /** Format: tel */
            PhoneNumber?: string | null;
            /** Format: date-time */
            DateOfBirth?: string | null;
            Bio?: string | null;
            /** Format: uri */
            Website?: string | null;
            Timezone?: string | null;
            AvatarUrl?: string | null;
            SocialLinks?: string | null;
        };
        VerifyEmailRequest: {
            Token?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
